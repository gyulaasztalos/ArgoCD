---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nebula-sync
  namespace: nebula-sync
  labels:
    app: nebula-sync
    app.kubernetes.io/name: nebula-sync
    app.kubernetes.io/part-of: nebula-sync
    app.kubernetes.io/instance: nebula-sync
spec:
  replicas: 1
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nebula-sync
  template:
    metadata:
      labels:
        app: nebula-sync
        app.kubernetes.io/name: nebula-sync
        app.kubernetes.io/part-of: nebula-sync
        app.kubernetes.io/instance: nebula-sync
    spec:
      containers:
        - name: nebula-sync
          image: ghcr.io/lovelaze/nebula-sync:v0.11.0
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false # prevent sudo, etc.
            privileged: false               # prevent acting like host root
          ports:
            - containerPort: 8080
          envFrom:
            - secretRef:
                name: nebula-sync-secret
            - configMapRef:
                name: nebula-sync-env
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 15
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /config
      restartPolicy: Always
      volumes:
        - name: config
          emptyDir: {}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsUser: 1000          # hardcode user to non-root if not set in Dockerfile
        runAsGroup: 1000         # hardcode group to non-root if not set in Dockerfile
        runAsNonRoot: true       # hardcode to non-root. Redundant to above if Dockerfile is set USER 1000          # prevent acting like host root
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - nebula-sync
              topologyKey: kubernetes.io/hostname
