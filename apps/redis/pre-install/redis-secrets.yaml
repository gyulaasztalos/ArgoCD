---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: redis-secrets
  namespace: redis
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: onepassword-connect           # your ClusterSecretStore name
    kind: ClusterSecretStore
  target:
    name: redis-secrets     # name of the Kubernetes Secret to be created
    creationPolicy: Owner
    template:
      engineVersion: v2
      type: Opaque
      data:
        redis-username: "{{ .redis_username }}"
        redis-password: "{{ .default_password }}"
        users.acl: |
          user default on ~* &* +@all >{{ .default_password }}
          user paperless on ~* &* +@all >{{ .paperless_password }}
          user authentik on ~* &* +@all >{{ .authentik_password }}
          user argocd on ~* &* +ping +info +client|setname +client|kill +subscribe +psubscribe +scan +get +set +del +expire +exists +publish +hget +hset +hmget +hmset +eval +evalsha >{{ .argocd_password }}
  data:
    - secretKey: redis_username            # key in the Kubernetes Secret
      remoteRef:
        key: redis-secrets
        property: redis-username
    - secretKey: default_password          # key in the Kubernetes Secret
      remoteRef:
        key: redis-secrets
        property: redis-password
    - secretKey: paperless_password          # key in the Kubernetes Secret
      remoteRef:
        key: redis-secrets
        property: redis-paperless-password
    - secretKey: authentik_password          # key in the Kubernetes Secret
      remoteRef:
        key: redis-secrets
        property: redis-authentik-password
    - secretKey: argocd_password          # key in the Kubernetes Secret
      remoteRef:
        key: redis-secrets
        property: redis-argocd-password
