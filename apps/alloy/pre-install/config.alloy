logging {
  level = "info"
  format = "logfmt"
}

// METRICS
// Node-Exporter

// This block relabels metrics coming from node_exporter to add standard labels
discovery.relabel "integrations_node_exporter" {
  targets = prometheus.exporter.unix.integrations_node_exporter.targets

  rule {
    // Set the instance label to the hostname of the machine
    target_label = "instance"
    replacement  = sys.env("HOSTNAME")
  }

  rule {
    // Set a standard job name for all node_exporter metrics
    target_label = "job"
    replacement = "node-exporter"
  }
}

// Configure the node_exporter integration to collect system metrics
prometheus.exporter.unix "integrations_node_exporter" {
  // Disable unnecessary collectors to reduce overhead
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors = ["meminfo"]

  filesystem {
    // Exclude filesystem types that aren't relevant for monitoring
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    // Exclude mount points that aren't relevant for monitoring
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    // Timeout for filesystem operations
    mount_timeout        = "5s"
  }

  netclass {
    // Ignore virtual and container network interfaces
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }

  netdev {
    // Exclude virtual and container network interfaces from device metrics
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

// Define how to scrape metrics from the node_exporter
prometheus.scrape "integrations_node_exporter" {
scrape_interval = "30s"
  // Use the targets with labels from the discovery.relabel component
  targets    = discovery.relabel.integrations_node_exporter.output
  // Send the scraped metrics to the relabeling component
  forward_to = [prometheus.remote_write.default.receiver]
}

// Define where to send the metrics for storage
prometheus.remote_write "default" {
  endpoint {
    // Send metrics to a locally running Prometheus instance
    url = "http://monitoring-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
  }
}

// LOGS
// Remote syslog
loki.source.syslog "remote_syslog" {
  listener {
    address   = "0.0.0.0:514"
    protocol  = "udp"
    syslog_format = "rfc3164"
  }
  relabel_rules = loki.relabel.syslog_preserve.rules
  forward_to = [loki.process.syslog_proc.receiver]
}

loki.relabel "syslog_preserve" {
  forward_to = []
  rule {
    source_labels = ["__syslog_message_hostname"]
    target_label = "nodename"
  }
  rule {
    source_labels = ["__syslog_message_severity"]
    target_label = "level"
  }
}

loki.process "syslog_proc" {
  forward_to = [loki.relabel.normalize_labels.receiver]

  stage.static_labels {
    values = { job = "unifi-syslog" }
  }

  stage.regex {
    expression = "^(?P<nodename>[A-Za-z0-9_.-]+\\s+)?(?:[A-Za-z0-9_.-]+:\\s)?(?P<application>[A-Za-z0-9_.()-]+)(?:\\[\\d+\\])?:\\s(?P<message>.*)$"
    labels_from_groups = true
  }

  stage.output {
    source = "message"
  }
}

// Node Logs
local.file_match "node_logs" {
  path_targets = [
    {
      __path__ = "/var/log/*.log",
      job = "node-logs",
    },
    {
      __path__ = "/var/log/unattended-upgrades/*.log",
      job = "node-logs",
    },
    {
      __path__ = "/var/log/syslog",
      job = "node-logs",
    },
    {
      __path__ = "/var/log/messages",
      job = "node-logs",
    },
  ]
}

loki.source.file "node_logs" {
  targets   = local.file_match.node_logs.targets
  forward_to = [loki.relabel.add_hostname.receiver]
}

// Container Logs
local.file_match "containerd_pods" {
  path_targets = [
    {
      __path__ = "/var/log/containers/*.log",
      job = "containerd-pods",
    },
  ]
}

loki.source.file "containerd_pods" {
  targets   = local.file_match.containerd_pods.targets
  forward_to = [loki.process.get_labels.receiver]
}

loki.process "get_labels" {
  stage.regex {
    source = "filename"
    expression  = ".*/(?P<pod>[^/_]+)_(?P<namespace>[^/_]+)_(?P<container>[^/_-]+)-[^/]+\\.log$"
    labels_from_groups = true
  }

  stage.cri {}

  stage.json {
    source = "log"
    expressions = { level = "level" }
  }

  stage.regex {
    expression = "(?i)(?:^|\\s)\\\"?(?:level|lvl|severity)\\\"?[=:]\\s*\\\"?(?P<level>.+)\\\"?\\s"
    labels_from_groups = true
  }

  // one-char levels
  stage.regex {
    expression = "(?:^|\\s)(?P<level>[EWI])\\s"
    labels_from_groups = true
  }

  // plain words anywhere (last resort), match whole word
  stage.regex {
    expression = "(?i)(?P<level>trace|debug|info|warning|warn|error|err|fatal)"
    labels_from_groups = true
  }

  forward_to = [loki.relabel.add_hostname.receiver]
}

loki.relabel "add_hostname" {
  forward_to = [loki.relabel.normalize_labels.receiver]
  rule {
    target_label = "nodename"
    replacement = sys.env("HOSTNAME")
  }
}

loki.relabel "normalize_labels" {
  forward_to = [loki.write.default.receiver]

  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^W$"
    replacement = "warning"
  }

  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^E$"
    replacement = "error"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^I$"
    replacement = "info"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^2$"
    replacement = "warning"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^1$"
    replacement = "error"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "^3$"
    replacement = "info"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "lowercase"
  }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "(?i)^warn$"
    replacement = "warning" }
  rule {
    source_labels = ["level"]
    target_label = "level"
    action = "replace"
    regex = "(?i)^err$"
    replacement = "error"
  }
  rule {
    source_labels = ["level"]
    target_label  = "level"
    action        = "replace"
    replacement   = "info"
    regex         = "^$"
  }
}

// Journal Logs
loki.source.journal "journalctl_to_loki" {
  path = "/var/log/journal"
  labels = {
    job = "systemd-journal",
    nodename = sys.env("HOSTNAME"),
  }
  // Only collect logs from the last 24 hours
  max_age       = "24h0m0s"
  // Apply relabeling rules to the logs
  relabel_rules = discovery.relabel.journalctl_to_loki.rules
  // Send logs to the local Loki instance
  forward_to    = [loki.write.default.receiver]
}

discovery.relabel "journalctl_to_loki" {
  targets = []
  rule {
    // Extract systemd unit information into a label
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    // Extract boot ID information into a label
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
  }
  rule {
    // Extract transport information into a label
    source_labels = ["__journal__transport"]
    target_label  = "transport"
  }
  rule {
    // Extract log priority into a level label
    source_labels = ["__journal_priority_keyword"]
    target_label  = "level"
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki.loki.svc.cluster.local:3100/loki/api/v1/push"
  }
}
